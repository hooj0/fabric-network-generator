version: '3.6'

#-----------------------------------------------------------------------------------
# base service yaml
#-----------------------------------------------------------------------------------
x-base-services:
  orderer-base: &orderer-base
    image: hyperledger/fabric-orderer${IMAGE_TAG_FABRIC}
    environment: &orderer-env-common
      ORDERER_GENERAL_LISTENADDRESS: 0.0.0.0
      ORDERER_GENERAL_LOCALMSPID: OrdererMSP
      
      ORDERER_GENERAL_GENESISMETHOD: file
      ORDERER_GENERAL_GENESISFILE: /etc/hyperledger/configtx/genesis.block
      ORDERER_GENERAL_LOCALMSPDIR: /etc/hyperledger/msp/orderer/msp
      
      # enabled TLS
      ORDERER_GENERAL_TLS_ENABLED: ${HYPERLEDGER_FABRIC_ENABLE_TLS}
      ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED: ${HYPERLEDGER_FABRIC_ENABLE_CLIENT_AUTH_REQUIRED}
      ORDERER_GENERAL_TLS_PRIVATEKEY: /etc/hyperledger/msp/orderer/tls/server.key
      ORDERER_GENERAL_TLS_CERTIFICATE: /etc/hyperledger/msp/orderer/tls/server.crt
      ORDERER_GENERAL_TLS_ROOTCAS: "[/etc/hyperledger/msp/orderer/tls/ca.crt]"
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    deploy:
      #mode: global
      mode: replicated
      replicas: 4
      #resources:
        #limits:
          #cpus: "0.5"
          #memory: 5000M
      restart_policy:
        condition: on-failure
      #placement:
      #  constraints: [node.role == manager]
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
      - kafka0
      - kafka1
      - kafka2
      - kafka3    

  peer-base: &peer-base
    image: hyperledger/fabric-peer${IMAGE_TAG_FABRIC}
    environment: &peer-env-common
      CORE_VM_ENDPOINT: unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE: fabric_blockchain_net
      #CORE_LOGGING_LEVEL: ERROR
      CORE_LOGGING_LEVEL: DEBUG
      # endorser enabled
      CORE_PEER_ENDORSER_ENABLED: "true"
      CORE_PEER_GOSSIP_USELEADERELECTION: "true"
      CORE_PEER_GOSSIP_ORGLEADER: "false"
      # channel service enalbed
      CORE_PEER_CHANNELSERVICE_ENABLED: "true"
      # The following setting skips the gossip handshake since we are not doing mutual TLS
      CORE_PEER_MSPCONFIGPATH: /etc/hyperledger/msp/peer/msp
      # skip phandshake
      CORE_PEER_GOSSIP_SKIPHANDSHAKE: "true"
      
      ########## profile enabled: true
      CORE_PEER_PROFILE_ENABLED: "false"
      CORE_PEER_TLS_ENABLED: ${HYPERLEDGER_FABRIC_ENABLE_TLS}
      CORE_PEER_TLS_CLIENTAUTHREQUIRED: ${HYPERLEDGER_FABRIC_ENABLE_CLIENT_AUTH_REQUIRED}
      CORE_PEER_TLS_CERT_FILE: /etc/hyperledger/msp/peer/tls/server.crt
      CORE_PEER_TLS_KEY_FILE: /etc/hyperledger/msp/peer/tls/server.key
      CORE_PEER_TLS_ROOTCERT_FILE: /etc/hyperledger/msp/peer/tls/ca.crt

      # NOTE BOTH below should never be used in production.
      CORE_PEER_AUTHENTICATION_TIMEWINDOW: 3600s
      CORE_PEER_EVENTS_TIMEWINDOW: 3600s
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    deploy:
      #mode: global
      mode: replicated
      replicas: 4
      #resources:
        #limits:
          #cpus: "0.25"
          #memory: 2500M
      restart_policy:
        condition: on-failure   


#-----------------------------------------------------------------------------------
# orderer & peer service yaml
#-----------------------------------------------------------------------------------
services:  
  orderer:
    container_name: orderer.simple.com
    <<: *orderer-base
    environment:
      <<: *orderer-env-common
      ORDERER_GENERAL_LOGLEVEL: debug
      ORDERER_GENERAL_TLS_CLIENTROOTCAS: "[/etc/hyperledger/msp/peerOrg1/msp/tlscacerts/tlsca.org1.foo.com-cert.pem, /etc/hyperledger/msp/peerOrg2/msp/tlscacerts/tlsca.org2.bar.com-cert.pem]"
      GRPC_TRACE: all=true,
      GRPC_VERBOSITY: debug
      ORDERER_GENERAL_AUTHENTICATION_TIMEWINDOW: 3600s #Not for production -- remove.
      
      # new add Kafka config
      ORDERER_KAFKA_RETRY_SHORTINTERVAL: 1s
      ORDERER_KAFKA_RETRY_SHORTTOTAL: 60s
      ORDERER_KAFKA_VERBOSE: "true"
    volumes:
      - ./fabric-configs/${FABRIC_NETWORK_CONFIGTX_VERSION}/channel-artifacts:/etc/hyperledger/configtx:ro
      - ./fabric-configs/${FABRIC_NETWORK_CONFIGTX_VERSION}/crypto-config/ordererOrganizations/simple.com/orderers/orderer.simple.com/:/etc/hyperledger/msp/orderer:ro
      - ./fabric-configs/${FABRIC_NETWORK_CONFIGTX_VERSION}/crypto-config/peerOrganizations/org1.foo.com/peers/peer0.org1.foo.com/:/etc/hyperledger/msp/peerOrg1:ro
      - ./fabric-configs/${FABRIC_NETWORK_CONFIGTX_VERSION}/crypto-config/peerOrganizations/org2.bar.com/peers/peer0.org2.bar.com/:/etc/hyperledger/msp/peerOrg2:ro
    ports:
      - 7050:7050

#-----------------------------------------------------------------------------------
# org1 service yaml
#-----------------------------------------------------------------------------------
  peer0_org1:
    container_name: peer0.org1.foo.com
    <<: *peer-base
    environment:
      <<: *peer-env-common
      CORE_PEER_ID: peer0.org1.foo.com
      CORE_PEER_ADDRESS: peer0.org1.foo.com:7051
      CORE_PEER_GOSSIP_EXTERNALENDPOINT: peer0.org1.foo.com:7051
      #CORE_PEER_GOSSIP_ORGLEADER: true
      CORE_PEER_LOCALMSPID: Org1MSP

      #CORE_PEER_TLS_ROOTCERT_FILE: /etc/hyperledger/msp/peer/msp/cacerts/ca.org1.foo.com-cert.pem
      CORE_PEER_TLS_CLIENTROOTCAS_FILES: /etc/hyperledger/msp/peer/msp/tlscacerts/tlsca.org1.foo.com-cert.pem
      
      # NEW ADD
      CORE_PEER_CHAINCODEADDRESS: peer0.org1.foo.com:7052
      CORE_PEER_CHAINCODELISTENADDRESS: 0.0.0.0:7052
      CORE_PEER_GOSSIP_BOOTSTRAP: peer1.org1.foo.com:7051
      
      # v1.2
      # CORE_PEER_LISTENADDRESS: peer0.org1.foo.com:7051
      CORE_PEER_GOSSIP_ENDPOINT: peer0.org1.foo.com:7051
      CORE_PEER_EVENTS_ADDRESS: 0.0.0.0:7053
    volumes:
      - /var/run/:/host/var/run/
      - ./fabric-configs/${FABRIC_NETWORK_CONFIGTX_VERSION}/crypto-config/peerOrganizations/org1.foo.com/peers/peer0.org1.foo.com/:/etc/hyperledger/msp/peer:ro
    ports:
      - 7051:7051
      - 7052:7052
      - 7053:7053
    depends_on:
      - orderer

  peer1_org1:
    container_name: peer1.org1.foo.com
    <<: *peer-base    
    environment:
      <<: *peer-env-common
      CORE_PEER_ID: peer1.org1.foo.com
      CORE_PEER_ADDRESS: peer1.org1.foo.com:7051
      CORE_PEER_GOSSIP_EXTERNALENDPOINT: peer1.org1.foo.com:7051
      CORE_PEER_LOCALMSPID: Org1MSP

      #CORE_PEER_TLS_ROOTCERT_FILE: /etc/hyperledger/msp/peer/msp/cacerts/ca.org1.foo.com-cert.pem
      CORE_PEER_TLS_CLIENTROOTCAS_FILES: /etc/hyperledger/msp/peer/msp/tlscacerts/tlsca.org1.foo.com-cert.pem
      
      # NEW ADD
      CORE_PEER_CHAINCODEADDRESS: peer1.org1.foo.com:7052
      CORE_PEER_CHAINCODELISTENADDRESS: 0.0.0.0:7052
      CORE_PEER_GOSSIP_BOOTSTRAP: peer0.org1.foo.com:7051
      
      # v1.2
      #CORE_PEER_LISTENADDRESS: peer1.org1.foo.com:7051
      CORE_PEER_GOSSIP_ENDPOINT: peer1.org1.foo.com:7051
      CORE_PEER_EVENTS_ADDRESS: 0.0.0.0:7053
    volumes:
      - /var/run/:/host/var/run/
      - ./fabric-configs/${FABRIC_NETWORK_CONFIGTX_VERSION}/crypto-config/peerOrganizations/org1.foo.com/peers/peer1.org1.foo.com/:/etc/hyperledger/msp/peer:ro
    ports:
      - 7056:7051
      - 7057:7052
      - 7058:7053
    depends_on:
      - orderer
      - peer0_org1  

#-----------------------------------------------------------------------------------
# org2 service yaml
#-----------------------------------------------------------------------------------
  peer0_org2:
    container_name: peer0.org2.bar.com
    <<: *peer-base
    environment:
      <<: *peer-env-common
      CORE_PEER_ID: peer0.org2.bar.com
      CORE_PEER_ADDRESS: peer0.org2.bar.com:7051
      CORE_PEER_GOSSIP_EXTERNALENDPOINT: peer0.org2.bar.com:7051
      #CORE_PEER_GOSSIP_ORGLEADER: true
      CORE_PEER_LOCALMSPID: Org2MSP
      #CORE_PEER_TLS_ROOTCERT_FILE: /etc/hyperledger/msp/peer/msp/cacerts/ca.org2.bar.com-cert.pem
      CORE_PEER_TLS_CLIENTROOTCAS_FILES: /etc/hyperledger/msp/peer/msp/tlscacerts/tlsca.org2.bar.com-cert.pem
      
      # NEW ADD
      CORE_PEER_CHAINCODEADDRESS: peer0.org2.bar.com:7052
      CORE_PEER_CHAINCODELISTENADDRESS: 0.0.0.0:7052
      CORE_PEER_GOSSIP_BOOTSTRAP: peer1.org2.bar.com:7051
      
      # v1.2
      #CORE_PEER_LISTENADDRESS: peer0.org2.bar.com:7051
      CORE_PEER_GOSSIP_ENDPOINT: peer0.org2.bar.com:7051
      CORE_PEER_EVENTS_ADDRESS: 0.0.0.0:7053
    volumes:
      - /var/run/:/host/var/run/
      - ./fabric-configs/${FABRIC_NETWORK_CONFIGTX_VERSION}/crypto-config/peerOrganizations/org2.bar.com/peers/peer0.org2.bar.com/:/etc/hyperledger/msp/peer:ro
    ports:
      - 8051:7051
      - 8052:7052
      - 8053:7053
    depends_on:
      - orderer

  peer1_org2:
    container_name: peer1.org2.bar.com
    <<: *peer-base
    environment:
      <<: *peer-env-common
      CORE_PEER_ID: peer1.org2.bar.com
      CORE_PEER_ADDRESS: peer1.org2.bar.com:7051
      CORE_PEER_GOSSIP_EXTERNALENDPOINT: peer1.org2.bar.com:7051
      CORE_PEER_LOCALMSPID: Org2MSP
      #CORE_PEER_TLS_ROOTCERT_FILE: /etc/hyperledger/msp/peer/msp/cacerts/ca.org2.bar.com-cert.pem
      CORE_PEER_TLS_CLIENTROOTCAS_FILES: /etc/hyperledger/msp/peer/msp/tlscacerts/tlsca.org2.bar.com-cert.pem
      
      # NEW ADD
      CORE_PEER_CHAINCODEADDRESS: peer1.org2.bar.com:7052
      CORE_PEER_CHAINCODELISTENADDRESS: 0.0.0.0:7052
      CORE_PEER_GOSSIP_BOOTSTRAP: peer0.org2.bar.com:7051
      
      # v1.2
      #CORE_PEER_LISTENADDRESS: peer1.org2.bar.com:7051
      CORE_PEER_GOSSIP_ENDPOINT: peer1.org2.bar.com:7051
      CORE_PEER_EVENTS_ADDRESS: 0.0.0.0:7053
    volumes:
      - /var/run/:/host/var/run/
      - ./fabric-configs/${FABRIC_NETWORK_CONFIGTX_VERSION}/crypto-config/peerOrganizations/org2.bar.com/peers/peer1.org2.bar.com/:/etc/hyperledger/msp/peer:ro
    ports:
      - 8056:7051
      - 8057:7052
      - 8058:7053
    depends_on:
      - orderer
      - peer0_org2  

