# hyperledger fabric network generator tools
# Copyright by @hoojo
# hoojo.me@gmail.com create by 2018-09-12
# @changelog hyperledger fabric network generator tools orderer & peer template defined


{% from 'commons-macro/fabric-macro.yaml' import render_orderer, render_peer, render_depends, dump_orderers, dump_peers with context %}
version: '3.6'

#-----------------------------------------------------------------------------------
# base service yaml
#-----------------------------------------------------------------------------------
x-base-services:
  orderer-base: &orderer-base
    image: hyperledger/fabric-orderer${IMAGE_TAG_FABRIC}
    environment: &orderer-env-common
      ORDERER_GENERAL_LISTENADDRESS: 0.0.0.0

      ORDERER_GENERAL_GENESISMETHOD: file
      ORDERER_GENERAL_GENESISFILE: /etc/hyperledger/configtx/genesis.block
      ORDERER_GENERAL_LOCALMSPDIR: /etc/hyperledger/msp/orderer/msp
      
      # enabled TLS
      ORDERER_GENERAL_TLS_ENABLED: ${HYPERLEDGER_FABRIC_ENABLE_TLS}
      ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED: ${HYPERLEDGER_FABRIC_ENABLE_CLIENT_AUTH_REQUIRED}
      ORDERER_GENERAL_TLS_PRIVATEKEY: /etc/hyperledger/msp/orderer/tls/server.key
      ORDERER_GENERAL_TLS_CERTIFICATE: /etc/hyperledger/msp/orderer/tls/server.crt
      ORDERER_GENERAL_TLS_ROOTCAS: "[/etc/hyperledger/msp/orderer/tls/ca.crt]"
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    deploy:
      #mode: global
      mode: replicated
      replicas: 4
      #resources:
        #limits:
          #cpus: "0.5"
          #memory: 5000M
      restart_policy:
        condition: on-failure
      #placement:
      #  constraints: [node.role == manager]
    depends_on:
%{ render_depends('zookeeper', zookeeper_count) -}
%{ render_depends('kafka', kafka_count) }

  peer-base: &peer-base
    image: hyperledger/fabric-peer${IMAGE_TAG_FABRIC}
    environment: &peer-env-common
      CORE_VM_ENDPOINT: unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE: fabric_blockchain_net
      #CORE_LOGGING_LEVEL: ERROR
      CORE_LOGGING_LEVEL: DEBUG
      # endorser enabled
      CORE_PEER_ENDORSER_ENABLED: "true"
      CORE_PEER_GOSSIP_USELEADERELECTION: "true"
      CORE_PEER_GOSSIP_ORGLEADER: "false"
      # channel service enalbed
      CORE_PEER_CHANNELSERVICE_ENABLED: "true"
      # The following setting skips the gossip handshake since we are not doing mutual TLS
      CORE_PEER_MSPCONFIGPATH: /etc/hyperledger/msp/peer/msp
      # skip phandshake
      CORE_PEER_GOSSIP_SKIPHANDSHAKE: "true"
      
      ########## profile enabled: true
      CORE_PEER_PROFILE_ENABLED: "false"
      CORE_PEER_TLS_ENABLED: ${HYPERLEDGER_FABRIC_ENABLE_TLS}
      CORE_PEER_TLS_CLIENTAUTHREQUIRED: ${HYPERLEDGER_FABRIC_ENABLE_CLIENT_AUTH_REQUIRED}
      CORE_PEER_TLS_CERT_FILE: /etc/hyperledger/msp/peer/tls/server.crt
      CORE_PEER_TLS_KEY_FILE: /etc/hyperledger/msp/peer/tls/server.key
      CORE_PEER_TLS_ROOTCERT_FILE: /etc/hyperledger/msp/peer/tls/ca.crt

      # NOTE BOTH below should never be used in production.
      CORE_PEER_AUTHENTICATION_TIMEWINDOW: 3600s
      CORE_PEER_EVENTS_TIMEWINDOW: 3600s
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    deploy:
      #mode: global
      mode: replicated
      replicas: 4
      #resources:
        #limits:
          #cpus: "0.25"
          #memory: 2500M
      restart_policy:
        condition: on-failure


services:
{% call(orderer, domain, hostname) dump_orderers(true) %}
%{- render_orderer(orderer, domain | lower, hostname | lower) -}
{% endcall %}

{% call(peer, domain, hostname) dump_peers(true) %}
%{- render_peer(peer, domain | lower, hostname | lower) -}
{% endcall %}