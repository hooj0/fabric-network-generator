%# ==============================================================================================
%# Orderer Organization template
%# ==============================================================================================
%# Orderer Organization render client root ca
%# ----------------------------------------------------------------------------------------------
{% macro render_orderer_clientrootcas() %}
  {% for peer in peers %}
    {% set peer_domain = peer.name | lower ~ '.' ~ peer.domain | lower %}
/etc/hyperledger/msp/peer%{peer.name | title}/msp/tlscacerts/tlsca.%{peer_domain }-cert.pem{% if not loop.last %}, {% endif %}
  {% endfor %}
{% endmacro %}

%# ----------------------------------------------------------------------------------------------
%# Orderer Organization render volumes
%# ----------------------------------------------------------------------------------------------
{% macro render_orderer_volumes() %}
  {% for peer in peers %}
    {% set peer_domain = peer.name | lower ~ '.' ~ peer.domain | lower %}
    {% if peer.hostnames is iterable %}
      - ./fabric-configs/${FABRIC_NETWORK_CONFIGTX_VERSION}/crypto-config/peerOrganizations/%{peer_domain }/peers/%{peer.hostnames[0] | lower }.%{peer_domain }/:/etc/hyperledger/msp/peer%{peer.name | title}:ro
    {% else %}
      - ./fabric-configs/${FABRIC_NETWORK_CONFIGTX_VERSION}/crypto-config/peerOrganizations/%{peer_domain }/peers/peer0.%{peer_domain }/:/etc/hyperledger/msp/peer%{peer.name | title}:ro
    {% endif %}
  {% endfor %}
{% endmacro %}

%# ----------------------------------------------------------------------------------------------
%# Orderer Organization render orderer
%# ----------------------------------------------------------------------------------------------
{% macro render_orderer(orderer, domain, hostname) %}
  {% set orderer_host = hostname | lower ~ '.' ~ domain | lower %}
  %{orderer.name | lower }_%{hostname }:
    container_name: %{orderer_host }
    <<: *orderer-base
    environment:
      <<: *orderer-env-common
      ORDERER_GENERAL_LOCALMSPID: %{orderer.name | title }MSP
      ORDERER_GENERAL_LOGLEVEL: debug
      ORDERER_GENERAL_TLS_CLIENTROOTCAS: "[%{render_orderer_clientrootcas() }]"
      GRPC_TRACE: all=true,
      GRPC_VERBOSITY: debug
      ORDERER_GENERAL_AUTHENTICATION_TIMEWINDOW: 3600s #Not for production -- remove.

      # new add Kafka config
      ORDERER_KAFKA_RETRY_SHORTINTERVAL: 1s
      ORDERER_KAFKA_RETRY_SHORTTOTAL: 60s
      ORDERER_KAFKA_VERBOSE: "true"
    volumes:
      - ./fabric-configs/${FABRIC_NETWORK_CONFIGTX_VERSION}/channel-artifacts:/etc/hyperledger/configtx:ro
      - ./fabric-configs/${FABRIC_NETWORK_CONFIGTX_VERSION}/crypto-config/ordererOrganizations/%{domain }/orderers/%{orderer_host }/:/etc/hyperledger/msp/orderer:ro
%{ render_orderer_volumes() }
    ports:
      - 7050:7050
{% endmacro %}

%# ==============================================================================================
%# Peer Organization template
%# ==============================================================================================
{% macro render_peer(peer, domain, hostname) %}
  {% set peer_host = hostname | lower ~ '.' ~ domain | lower %}
  %{hostname}_%{peer.name | lower }:
    container_name: %{peer_host }
    <<: *peer-base
    environment:
      <<: *peer-env-common
      CORE_PEER_ID: %{peer_host }
      CORE_PEER_ADDRESS: %{peer_host }:7051
      CORE_PEER_GOSSIP_EXTERNALENDPOINT: %{peer_host }:7051
      #CORE_PEER_GOSSIP_ORGLEADER: true
      CORE_PEER_LOCALMSPID: %{peer.name | title }MSP

      #CORE_PEER_TLS_ROOTCERT_FILE: /etc/hyperledger/msp/peer/msp/cacerts/ca.%{domain }-cert.pem
      CORE_PEER_TLS_CLIENTROOTCAS_FILES: /etc/hyperledger/msp/peer/msp/tlscacerts/tlsca.%{domain }-cert.pem

      # NEW ADD
      CORE_PEER_CHAINCODEADDRESS: %{peer_host }:7052
      CORE_PEER_CHAINCODELISTENADDRESS: 0.0.0.0:7052
      CORE_PEER_GOSSIP_BOOTSTRAP: %{peer_host }:7051
      #CORE_PEER_GOSSIP_BOOTSTRAP: peer1.%{domain }:7051

      # v1.2
      # CORE_PEER_LISTENADDRESS: %{peer_host }:7051
      CORE_PEER_GOSSIP_ENDPOINT: %{peer_host }:7051
      CORE_PEER_EVENTS_ADDRESS: 0.0.0.0:7053
    volumes:
      - /var/run/:/host/var/run/
      - ./fabric-configs/${FABRIC_NETWORK_CONFIGTX_VERSION}/crypto-config/peerOrganizations/%{domain }/peers/%{peer_host }/:/etc/hyperledger/msp/peer:ro
    ports:
      - 7051:7051
      - 7052:7052
      - 7053:7053
    depends_on:
      - orderer
{% endmacro %}