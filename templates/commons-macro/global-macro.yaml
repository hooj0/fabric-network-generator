%# hyperledger fabric network generator tools
%# Copyright by @hoojo
%# hoojo.me@gmail.com create by 2018-09-12
%# @changelog hyperledger fabric network generator tools peer & orderer macro defined


%# ==============================================================================================
%# global variables
%# ==============================================================================================
{% set fabric = namespace(orderer_count=0, peer_count=0) %}


%# ==============================================================================================
%# global call macro
%# ==============================================================================================
{% macro dump_orderers(is_header=false) %}
  {% for orderer in orderers %}
{% if is_header %}
#-----------------------------------------------------------------------------------
# %{orderer.name } service yaml
#-----------------------------------------------------------------------------------
{% endif %}
    {% if orderer.hostnames is sequence %}
      {% for hostname in orderer.hostnames %}
%{ caller(orderer, orderer.domain | lower, hostname | lower) }
      {% endfor %}
    {% elif orderer.count > 0 %}
      {% for index in range(orderer.count) %}
      {% set hostname = orderer.name | lower ~ index %}
%{ caller(orderer, orderer.domain | lower, hostname) }
      {% endfor %}
    {% else %}
%{ caller(orderer, orderer.domain | lower, orderer.name | lower) }
    {% endif %}
  {% endfor %}
{% endmacro %}


{% macro dump_peers(is_header=false) %}
  {% for peer in peers %}
{% if is_header %}
#-----------------------------------------------------------------------------------
# %{peer.name } service yaml
#-----------------------------------------------------------------------------------
{% endif %}
    {% set peer_domain = peer.name | lower ~ '.' ~ peer.domain | lower %}
    {% if peer.hostnames is iterable %}
      {% for hostname in peer.hostnames %}
%{ caller(peer, peer_domain, hostname) }
      {% endfor %}
    {% else %}
      {% for index in range(peer.template_count) %}
%{ caller(peer, peer_domain, 'peer' ~ index) }
      {% endfor %}
    {% endif %}
  {% endfor %}
{% endmacro %}


%# ==============================================================================================
%# Orderer Organization template
%# ==============================================================================================
%# Orderer Organization render client root ca
%# ----------------------------------------------------------------------------------------------
{% macro render_orderer_clientrootcas() %}
  {% for peer in peers %}
    {% set peer_domain = peer.name | lower ~ '.' ~ peer.domain | lower %}
/etc/hyperledger/msp/peer%{peer.name | title}/msp/tlscacerts/tlsca.%{peer_domain }-cert.pem{% if not loop.last %}, {% endif %}
  {% endfor %}
{% endmacro %}


%# ----------------------------------------------------------------------------------------------
%# Orderer Organization render volumes
%# ----------------------------------------------------------------------------------------------
{% macro render_orderer_volumes() %}
  {% for peer in peers %}
    {% set peer_domain = peer.name | lower ~ '.' ~ peer.domain | lower %}
    {% if peer.hostnames is iterable %}
      - ./fabric-configs/${FABRIC_NETWORK_CONFIGTX_VERSION}/crypto-config/peerOrganizations/%{peer_domain }/peers/%{peer.hostnames[0] | lower }.%{peer_domain }/:/etc/hyperledger/msp/peer%{peer.name | title}:ro
    {% else %}
      - ./fabric-configs/${FABRIC_NETWORK_CONFIGTX_VERSION}/crypto-config/peerOrganizations/%{peer_domain }/peers/peer0.%{peer_domain }/:/etc/hyperledger/msp/peer%{peer.name | title}:ro
    {% endif %}
  {% endfor %}
{% endmacro %}


%# ==============================================================================================
%# Peer Organization template
%# ==============================================================================================

%# ----------------------------------------------------------------------------------------------
%# peer Organization depends orderer template
%# ----------------------------------------------------------------------------------------------
{% macro render_peer_orderer_depend() %}
  {% for orderer in orderers %}
    {% if orderer.hostnames is sequence %}
      {% for hostname in orderer.hostnames %}
      - %{hostname ~ '_' ~ orderer.name | lower }
      {% endfor %}
    {% elif orderer.count > 0 %}
      {% for index in range(orderer.count) %}
      - %{orderer.name | lower ~ index }
      {% endfor %}
    {% else %}
      - %{orderer.name | lower }
    {% endif %}
  {% endfor %}
{% endmacro %}


{% macro render_peer_depend(peer, peer_name) %}
  {% set depend_peer = none %}
  {% if peer.hostnames is iterable %}
    {% set depend_peer = peer.hostnames[0] | lower ~ '_' ~ peer.name | lower %}
  {% else %}
    {% set depend_peer = 'peer0_' ~ peer.name | lower %}
  {% endif %}
  {% if peer_name != depend_peer %}
      - %{depend_peer }
  {% endif %}
{% endmacro %}



%# ==============================================================================================
%# Orderer & Peer Organization depends template
%# ==============================================================================================
{% macro render_depends(service, count) %}
  {% for index in range(count) %}
      - %{service}%{index}
  {% endfor %}
{% endmacro %}


%# ==============================================================================================
%# zookeeper template
%# ==============================================================================================
%# zookeeper render cluster servers
%# ----------------------------------------------------------------------------------------------
{% macro render_zookeeper_servers() %}
  {% for index in range(zookeeper_count) %}
server.%{loop.index}=zookeeper%{index}:2888:3888{% if not loop.last %} {% endif %}
  {% endfor %}
{% endmacro %}


%# ==============================================================================================
%# kafka template
%# ==============================================================================================
%# kafka render zookeeper cluster servers
%# ----------------------------------------------------------------------------------------------
{% macro render_kafka_zookeeper_connect() %}
  {% for index in range(zookeeper_count) %}
zookeeper%{index}:2181{% if not loop.last %},{% endif %}
  {% endfor %}
{% endmacro %}