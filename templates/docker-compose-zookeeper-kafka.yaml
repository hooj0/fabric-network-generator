# hyperledger fabric network generator tools
# Copyright by @hoojo
# hoojo.me@gmail.com create by 2018-09-12
# @changelog hyperledger fabric network generator tools zookeeper & kafka template defined

{% from 'commons-macro/global-macro.yaml' import render_depends with context %}
{% from 'commons-macro/global-macro.yaml' import render_zookeeper_servers, render_kafka_zookeeper_connect with context %}
version: '3.6'

#-----------------------------------------------------------------------------------
# base service yaml
#-----------------------------------------------------------------------------------
x-base-services:
  zookeeper: &zookeeper-base
    image: hyperledger/fabric-zookeeper${IMAGE_TAG_FABRIC_ZOOKEEPER}
    environment: &zookeeper-env-common
      ZOO_MY_ID: 1
      #ZOO_SERVERS: server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
      ZOO_SERVERS: %{render_zookeeper_servers() }
    expose:
      - 2181
      - 2888
      - 3888
    deploy: &zookeeper-deploy-common
      #mode: global
      mode: replicated
      replicas: 4
      #resources:
        #limits:
          #cpus: "0.25"
          #memory: 3000M
      restart_policy:
        condition: on-failure
      #placement:
      #  constraints: [node.role == manager]

  kafka: &kafka-base
    image: hyperledger/fabric-kafka${IMAGE_TAG_FABRIC_KAFKA}
    environment: &kafka-env-common
      KAFKA_MESSAGE_MAX_BYTES: 103809024 # 99 * 1024 * 1024 B
      KAFKA_REPLICA_FETCH_MAX_BYTES: 103809024 # 99 * 1024 * 1024 B
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "false"
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      #zookeeper.connection.timeout.ms
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 10000
      #zookeeper.session.timeout.ms
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 10000
      #KAFKA_ZOOKEEPER_CONNECT: zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
      KAFKA_ZOOKEEPER_CONNECT: %{render_kafka_zookeeper_connect() }
    expose:
      - 9092    
    deploy: &kafka-deploy-common
      #mode: global
      mode: replicated
      replicas: 4
      #resources:
        #limits:
          #cpus: "0.25"
          #memory: 3000M
      restart_policy:
        condition: on-failure
      #placement:
      #  constraints: [node.role == manager]
    depends_on:
%{ render_depends('zookeeper', zookeeper_count) -}

#-----------------------------------------------------------------------------------
# kafka & zookeeper service yaml
#-----------------------------------------------------------------------------------
services:
{% for index in range(zookeeper_count) %}
  zookeeper%{index}:
    container_name: zookeeper%{index}
    <<: *zookeeper-base
    environment:
      <<: *zookeeper-env-common
      ZOO_MY_ID: %{loop.index }

{% endfor %}

{% for index in range(kafka_count) %}
  kafka%{index}:
    container_name: kafka%{index}
    <<: *kafka-base
    environment:
      <<: *kafka-env-common
      KAFKA_BROKER_ID: %{index}

{% endfor %}